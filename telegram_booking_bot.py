import os
import sys
import datetime
import asyncio
import pytz
from typing import Dict, List

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
def check_module_conflicts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º–µ–Ω –º–æ–¥—É–ª–µ–π"""
    conflicts = []
    current_dir = os.getcwd()
    
    # –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π Python, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç
    standard_modules = ['calendar', 'datetime', 'json', 'os', 'sys', 'time', 'email', 'asyncio']
    
    for module in standard_modules:
        conflict_file = os.path.join(current_dir, f"{module}.py")
        if os.path.exists(conflict_file):
            conflicts.append(f"{module}.py")
    
    if conflicts:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–º–µ–Ω –º–æ–¥—É–ª–µ–π!")
        print("–°–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏ Python:")
        for conflict in conflicts:
            print(f"   üìÑ {conflict}")
        print("\nüí° –†–µ—à–µ–Ω–∏–µ:")
        print("   –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ —ç—Ç–∏ —Ñ–∞–π–ª—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:")
        for conflict in conflicts:
            new_name = conflict.replace('.py', '_custom.py')
            print(f"   mv {conflict} {new_name}")
        print("\n‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π.")
        return True
    return False

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
if check_module_conflicts():
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
try:
    from aiogram import Bot, Dispatcher, types
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
    from aiogram.filters import Command
    from google.oauth2 import service_account
    from googleapiclient.discovery import build
    from googleapiclient.errors import HttpError
    from dotenv import load_dotenv
    import openai
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫: {e}")
    print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    sys.exit(1)

load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_CREDENTIALS_FILE = "aura-469414-e8af117aeedf.json"
CALENDAR_ID = "primary"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not API_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = OPENAI_API_KEY

# --- Google Calendar ---
SCOPES = ['https://www.googleapis.com/auth/calendar']
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

def initialize_calendar_service():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Calendar —Å–µ—Ä–≤–∏—Å–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    try:
        print(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {GOOGLE_CREDENTIALS_FILE}")
        
        if not os.path.exists(GOOGLE_CREDENTIALS_FILE):
            print(f"‚ùå –§–∞–π–ª {GOOGLE_CREDENTIALS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
            print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
            print(f"üìÑ –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir('.')}")
            return None
            
        credentials = service_account.Credentials.from_service_account_file(
            GOOGLE_CREDENTIALS_FILE, scopes=SCOPES
        )
        
        service = build('calendar', 'v3', credentials=credentials)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            calendar_list = service.calendarList().list().execute()
            calendars = calendar_list.get('items', [])
            print(f"‚úÖ Google Calendar API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print(f"üìÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π: {len(calendars)}")
            
            for calendar in calendars:
                cal_id = calendar['id']
                cal_name = calendar.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                access_role = calendar.get('accessRole', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                print(f"  üìã {cal_name} (ID: {cal_id[:20]}...) - –ü—Ä–∞–≤–∞: {access_role}")
                
                if cal_id == CALENDAR_ID or CALENDAR_ID == "primary":
                    print(f"  üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–ª–µ–Ω–¥–∞—Ä—å: {cal_name}")
            
            return service
            
        except Exception as test_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {test_error}")
            return None
            
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö {GOOGLE_CREDENTIALS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Calendar API: {e}")
        print(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return None

service = initialize_calendar_service()

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç ---
user_dates: Dict[int, datetime.date] = {}

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ ---
def get_free_slots(day: datetime.date) -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    if not service:
        return []
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–Ω—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
        start_of_day = MOSCOW_TZ.localize(
            datetime.datetime.combine(day, datetime.time(9, 0))
        )
        end_of_day = MOSCOW_TZ.localize(
            datetime.datetime.combine(day, datetime.time(18, 0))
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        events_result = service.events().list(
            calendarId=CALENDAR_ID,
            timeMin=start_of_day.isoformat(),
            timeMax=end_of_day.isoformat(),
            singleEvents=True,
            orderBy='startTime'
        ).execute()
        events = events_result.get('items', [])

        # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
        busy_slots = []
        for event in events:
            start = event['start'].get('dateTime', event['start'].get('date'))
            end = event['end'].get('dateTime', event['end'].get('date'))
            
            if start and end:
                try:
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                    if 'T' in start:  # dateTime —Ñ–æ—Ä–º–∞—Ç
                        start_dt = datetime.datetime.fromisoformat(start.replace('Z', '+00:00'))
                        end_dt = datetime.datetime.fromisoformat(end.replace('Z', '+00:00'))
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                        start_dt = start_dt.astimezone(MOSCOW_TZ)
                        end_dt = end_dt.astimezone(MOSCOW_TZ)
                        busy_slots.append((start_dt, end_dt))
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
                    continue

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
        slots = []
        current = start_of_day
        
        while current < end_of_day:
            slot_end = current + datetime.timedelta(hours=1)
            slot_free = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ —Å–ª–æ—Ç —Å –∑–∞–Ω—è—Ç—ã–º–∏
            for busy_start, busy_end in busy_slots:
                if current < busy_end and slot_end > busy_start:
                    slot_free = False
                    break
            
            if slot_free:
                slots.append(current.strftime("%H:%M"))
            
            current = slot_end

        return slots

    except HttpError as error:
        print(f"–û—à–∏–±–∫–∞ Google Calendar API: {error}")
        return []
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤: {e}")
        return []

# --- –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–∞–º–∏ ---
def create_date_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π"""
    buttons = []
    for i in range(7):
        date = datetime.date.today() + datetime.timedelta(days=i)
        date_str = date.strftime("%Y-%m-%d")
        day_name = date.strftime("%A")
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        day_names = {
            'Monday': '–ü–Ω', 'Tuesday': '–í—Ç', 'Wednesday': '–°—Ä',
            'Thursday': '–ß—Ç', 'Friday': '–ü—Ç', 'Saturday': '–°–±', 'Sunday': '–í—Å'
        }
        day_ru = day_names.get(day_name, day_name)
        button_text = f"{date_str} ({day_ru})"
        buttons.append([KeyboardButton(text=date_str)])
    
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)

# --- –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ ---
def create_time_keyboard(slots: List[str]) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏"""
    buttons = []
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    for i in range(0, len(slots), 3):
        row = []
        for j in range(i, min(i + 3, len(slots))):
            row.append(KeyboardButton(text=slots[j]))
        buttons.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã")])
    
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)

# --- –•—ç–Ω–¥–ª–µ—Ä /start ---
@dp.message(Command("start"))
async def start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not service:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Calendar. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    keyboard = create_date_keyboard()
    welcome_text = (
        "üè• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º!\n\n"
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:"
    )
    await message.reply(welcome_text, reply_markup=keyboard)

# --- –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã ---
@dp.message(lambda message: message.text and len(message.text) == 10 and "-" in message.text)
async def choose_date(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    try:
        day = datetime.datetime.strptime(message.text, "%Y-%m-%d").date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if day < datetime.date.today():
            await message.reply("‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É.")
            return
        
        user_dates[message.from_user.id] = day
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
        slots = get_free_slots(day)
        
        if not slots:
            keyboard = create_date_keyboard()
            await message.reply(
                f"‚ùå –ù–∞ {message.text} –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:",
                reply_markup=keyboard
            )
            return

        keyboard = create_time_keyboard(slots)
        day_name = day.strftime("%A, %d %B %Y")
        await message.reply(
            f"üïê –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ {message.text}:\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ {len(slots)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤",
            reply_markup=keyboard
        )

    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î")
        return

# --- –•—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ---
@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã")
async def back_to_dates(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"""
    keyboard = create_date_keyboard()
    await message.reply("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=keyboard)

# --- –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ ---
@dp.message(lambda message: message.text and ":" in message.text and len(message.text) == 5)
async def book_slot(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
    if not service:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Calendar. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    try:
        selected_time = message.text
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞—Ç—É
        day = user_dates.get(user_id)
        if not day:
            keyboard = create_date_keyboard()
            await message.reply("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –≤—Å—Ç—Ä–µ—á–∏ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
        start_time = datetime.datetime.strptime(selected_time, "%H:%M").time()
        start_datetime = MOSCOW_TZ.localize(
            datetime.datetime.combine(day, start_time)
        )
        end_datetime = start_datetime + datetime.timedelta(hours=1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –≤—Å–µ –µ—â–µ —Å–≤–æ–±–æ–¥–µ–Ω
        current_slots = get_free_slots(day)
        if selected_time not in current_slots:
            keyboard = create_time_keyboard(current_slots) if current_slots else create_date_keyboard()
            await message.reply(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=keyboard
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_name = message.from_user.full_name or "–ö–ª–∏–µ–Ω—Ç"
        user_username = f"@{message.from_user.username}" if message.from_user.username else ""
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        event = {
            'summary': f'–ó–∞–ø–∏—Å—å: {user_name}',
            'description': f'–ö–ª–∏–µ–Ω—Ç: {user_name} {user_username}\nTelegram ID: {user_id}',
            'start': {
                'dateTime': start_datetime.isoformat(),
                'timeZone': 'Europe/Moscow'
            },
            'end': {
                'dateTime': end_datetime.isoformat(),
                'timeZone': 'Europe/Moscow'
            },
            'attendees': [],
            'reminders': {
                'useDefault': False,
                'overrides': [
                    {'method': 'popup', 'minutes': 30},       # –ó–∞ 30 –º–∏–Ω—É—Ç
                ],
            },
        }
        
        print(f"üîç –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:")
        print(f"  üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å ID: {CALENDAR_ID}")
        print(f"  üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {event['summary']}")
        print(f"  üïê –ù–∞—á–∞–ª–æ: {start_datetime.isoformat()}")
        print(f"  üïë –ö–æ–Ω–µ—Ü: {end_datetime.isoformat()}")
        print(f"  üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {user_id})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        try:
            created_event = service.events().insert(calendarId=CALENDAR_ID, body=event).execute()
            event_id = created_event.get('id')
            event_link = created_event.get('htmlLink', '–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
            
            print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
            print(f"  üÜî ID —Å–æ–±—ã—Ç–∏—è: {event_id}")
            print(f"  üîó –°—Å—ã–ª–∫–∞: {event_link}")
            
        except HttpError as http_error:
            error_details = http_error.error_details if hasattr(http_error, 'error_details') else str(http_error)
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {http_error}")
            print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_details}")
            
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if CALENDAR_ID != "primary":
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ...")
                try:
                    created_event = service.events().insert(calendarId="primary", body=event).execute()
                    print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {created_event.get('id')}")
                except Exception as fallback_error:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {fallback_error}")
                    raise http_error
            else:
                raise http_error
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞—Ç
        if user_id in user_dates:
            del user_dates[user_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_text = (
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–∏–µ–º!\n\n"
            f"üìÖ –î–∞—Ç–∞: {day.strftime('%d.%m.%Y')}\n"
            f"üïê –í—Ä–µ–º—è: {selected_time} - {end_datetime.strftime('%H:%M')}\n"
            f"üë§ –ò–º—è: {user_name}\n\n"
            f"üìù –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.\n"
            f"üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –∏ –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –ø—Ä–∏–µ–º–∞.\n\n"
            f"–î–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
        
        await message.reply(confirmation_text, reply_markup=ReplyKeyboardRemove())
        
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú")
    except HttpError as error:
        print(f"–û—à–∏–±–∫–∞ Google Calendar API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {error}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π ---
@dp.message(Command("my_bookings"))
async def my_bookings(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not service:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Calendar.")
        return
    
    try:
        user_id = str(message.from_user.id)
        now = datetime.datetime.now(MOSCOW_TZ)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π
        time_max = now + datetime.timedelta(days=30)
        
        events_result = service.events().list(
            calendarId=CALENDAR_ID,
            timeMin=now.isoformat(),
            timeMax=time_max.isoformat(),
            singleEvents=True,
            orderBy='startTime'
        ).execute()
        events = events_result.get('items', [])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_events = []
        for event in events:
            description = event.get('description', '')
            if user_id in description:
                user_events.append(event)
        
        if not user_events:
            await message.reply("üìÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
            return
        
        response = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
        for i, event in enumerate(user_events, 1):
            start = event['start'].get('dateTime', event['start'].get('date'))
            if start:
                start_dt = datetime.datetime.fromisoformat(start.replace('Z', '+00:00'))
                start_dt = start_dt.astimezone(MOSCOW_TZ)
                date_str = start_dt.strftime('%d.%m.%Y')
                time_str = start_dt.strftime('%H:%M')
                response += f"{i}. {date_str} –≤ {time_str}\n"
        
        await message.reply(response)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.")

# --- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI ---
@dp.message()
async def chat_with_openai(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å OpenAI"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text in ["üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"]:
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if (message.text and 
            (len(message.text) == 10 and "-" in message.text) or  # –¥–∞—Ç–∞
            (len(message.text) == 5 and ":" in message.text)):    # –≤—Ä–µ–º—è
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        system_prompt = (
            "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–µ. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º, "
            "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—Å–ª—É–≥–∞—Ö –∏ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ. "
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º, –Ω–∞–ø—Ä–∞–≤—å –µ–≥–æ –∫ –∫–æ–º–∞–Ω–¥–µ /start."
        )
        
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message.text}
            ],
            max_tokens=300,
            temperature=0.7
        )
        
        answer = response.choices[0].message.content
        await message.reply(answer)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
        await message.reply(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n"
            "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )

# --- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è ---
@dp.message(Command("test_calendar"))
async def test_calendar(message: types.Message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Calendar"""
    if not service:
        await message.reply("‚ùå Google Calendar API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        now = datetime.datetime.now(MOSCOW_TZ)
        test_start = now + datetime.timedelta(minutes=1)
        test_end = test_start + datetime.timedelta(minutes=5)
        
        test_event = {
            'summary': '–¢–ï–°–¢ - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
            'description': f'–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç Telegram –±–æ—Ç–∞\n–°–æ–∑–¥–∞–Ω–æ: {now.strftime("%d.%m.%Y %H:%M")}',
            'start': {
                'dateTime': test_start.isoformat(),
                'timeZone': 'Europe/Moscow'
            },
            'end': {
                'dateTime': test_end.isoformat(),
                'timeZone': 'Europe/Moscow'
            },
        }
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        created_event = service.events().insert(calendarId=CALENDAR_ID, body=test_event).execute()
        event_id = created_event.get('id')
        
        # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        service.events().delete(calendarId=CALENDAR_ID, eventId=event_id).execute()
        
        await message.reply(
            f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω!\n"
            f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å ID: {CALENDAR_ID}\n"
            f"üÜî –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ: {event_id[:20]}...\n"
            f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Calendar —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
        )
        
    except HttpError as error:
        await message.reply(
            f"‚ùå –û—à–∏–±–∫–∞ Google Calendar API:\n"
            f"–ö–æ–¥: {error.resp.status}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {error.resp.reason}\n"
            f"–î–µ—Ç–∞–ª–∏: {error.content.decode() if error.content else '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π'}"
        )
    except Exception as e:
        await message.reply(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏ ---
@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = (
        "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º\n"
        "/my_bookings - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏\n"
        "/test_calendar - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Google Calendar\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üìù –ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n\n"
        "üí¨ –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å - —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    )
    await message.reply(help_text)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print(f"üìÖ Google Calendar {'–ø–æ–¥–∫–ª—é—á–µ–Ω' if service else '–ù–ï –ø–æ–¥–∫–ª—é—á–µ–Ω'}")
    print(f"ü§ñ OpenAI {'–ø–æ–¥–∫–ª—é—á–µ–Ω' if OPENAI_API_KEY else '–ù–ï –ø–æ–¥–∫–ª—é—á–µ–Ω'}")
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())